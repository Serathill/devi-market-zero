<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd  http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
    <apikit:config name="scanare-produs-api-config" api="scanare-produs-api.raml" outboundHeadersMapName="outboundHeaders" httpStatusVarName="httpStatus" />
    <http:listener-config name="HTTPS_Listener_config" doc:name="HTTPS Listener">
        <http:listener-connection host="0.0.0.0" port="8081">
        </http:listener-connection>
    </http:listener-config>
    <db:config name="Database_Config" doc:name="Database Config" doc:id="c69fe64d-b2d5-40bc-b75a-a97e741f46af">
        <db:generic-connection url="jdbc:clickhouse:https://cd1snbyswh.germanywestcentral.azure.clickhouse.cloud:8443/default?ssl=true&amp;compress=0" driverClassName="com.clickhouse.jdbc.ClickHouseDriver" user="default" password="ORO~b1.47MDxJ" />
    </db:config>
    <flow name="scanare-produs-api-main">
        <http:listener path="/api/*" config-ref="HTTPS_Listener_config">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body><![CDATA[#[payload]]]></http:body>
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:error-response>
        </http:listener>
        <apikit:router doc:name="APIkit Router" doc:id="5ba6b89e-8674-4ab5-a95e-ce7b7f31bacc" config-ref="scanare-produs-api-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:BAD_REQUEST">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Bad request"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">400</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:METHOD_NOT_ALLOWED">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Method not allowed"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">405</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_ACCEPTABLE">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not acceptable"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">406</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:UNSUPPORTED_MEDIA_TYPE">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Unsupported media type"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">415</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_IMPLEMENTED">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not Implemented"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">501</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="scanare-produs-api-console">
        <http:listener path="/console/*" config-ref="HTTPS_Listener_config">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body><![CDATA[#[payload]]]></http:body>
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:error-response>
        </http:listener>
        <apikit:console config-ref="scanare-produs-api-config" />
    </flow>
    <flow name="post:\product_scan:application\json:scanare-produs-api-config">
        <set-variable value="#[payload]" doc:name="Set Variable" doc:id="ef042891-e289-4a07-9cce-83628a034c75" variableName="RAW_JSON" />
		<choice doc:name="Choice" doc:id="4b858e8e-c30e-4ce7-bb2f-a4e86897c91e">
            <when expression="#[!isEmpty(payload.barcode) and !isEmpty(payload.scan_timestamp) and (payload.scan_timestamp as DateTime {format: &quot;yyyy-MM-dd'T'HH:mm:ssXXX&quot;} default null) != null]">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  status: "success",
  operation: "updated",
  productId: "abc-uuid",
  barcode: vars.RAW_JSON.barcode,
  scan_timestamp: vars.RAW_JSON.scan_timestamp
} as Object {encoding: "UTF-8", mediaType: "application/json"}]]></ee:set-payload>
                    </ee:message>
                </ee:transform>
            </when>
            <otherwise>
                <raise-error doc:name="Raise error" doc:id="5d0973db-a68b-434f-95f4-77681c98b989" type="PRODUCT:NOT_VALID" description="Barcode or timestamp are invalid, please check the request." />
            </otherwise>
        </choice>
        <ee:transform doc:name="Transform Message" doc:id="500b54b0-1194-49ef-868b-2570e31f8eb8">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::core::Strings


var fallbackTimestamp = now() as String { format: "yyyy-MM-dd'T'HH:mm:ss'Z'" }

---
{
  barcode: upper(trim(payload.barcode)), // normalizeazÄƒ barcode-ul
  scan_timestamp: 
    if (!isEmpty(payload.scan_timestamp)) 
      payload.scan_timestamp 
    else 
      fallbackTimestamp,

  clickhouse_formatted_timestamp: 
    if (!isEmpty(payload.scan_timestamp))
      (payload.scan_timestamp as DateTime) as String { format: "yyyy-MM-dd HH:mm:ss" }
    else 
      (now() as DateTime) as String { format: "yyyy-MM-dd HH:mm:ss" }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        <db:select doc:name="Select" doc:id="cf9ce4f2-1389-421c-93b7-f04a4c3fbd61" config-ref="Database_Config" target="SELECT_VALUE">
            <db:sql><![CDATA[SELECT 1 FROM devimarket_db.product_scan WHERE barcode = :barcode LIMIT 1]]></db:sql>
            <db:input-parameters><![CDATA[#[{
  "barcode": payload.barcode
  
}]]]></db:input-parameters>
        </db:select>
        <choice doc:name="Choice" doc:id="fb8bc993-d948-460b-bfb4-67be3a18c049">
            <when expression="#[sizeOf(vars.SELECT_VALUE) == 0]">
                <db:insert doc:name="Insert" doc:id="5371b09a-793a-4897-adcc-615140fb57f1" config-ref="Database_Config">
                    <db:sql><![CDATA[INSERT INTO devimarket_db.product_scan(barcode, timestamp) VALUES (:barcode, :clickhouse_formatted_timestamp)]]></db:sql>
                    <db:input-parameters><![CDATA[#[{
  "barcode": payload.barcode,
  "clickhouse_formatted_timestamp": payload.clickhouse_formatted_timestamp
  
}]]]></db:input-parameters>
                </db:insert>
                <ee:transform doc:name="Transform Message" doc:id="2ea392c9-8b55-406e-89ed-51e2e788c722">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  status: "Product inserted succesfully.",
  barcode: vars.RAW_JSON.barcode,
  scan_timestamp: vars.RAW_JSON.scan_timestamp,
  error: null
}]]></ee:set-payload>
                    </ee:message>
                </ee:transform>
            </when>
            <otherwise>
                <ee:transform doc:name="Transform Message" doc:id="5fb4279b-d340-4695-ae70-69cc73fc031f">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  status: "The product already exits.",
  barcode: vars.RAW_JSON.barcode,
  scan_timestamp: vars.RAW_JSON.scan_timestamp,
  error: null
}]]></ee:set-payload>
                    </ee:message>
                </ee:transform>
            </otherwise>
        </choice>
        <error-handler>
            <on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="7ad5ad90-7231-42c5-9240-c8c494d05f99" type="ANY">
                <logger level="INFO" doc:name="Logger" doc:id="5b7ded02-ae42-4643-be9f-94bf79d93c82" message="#[error]" />
                <ee:transform doc:name="Transform Message" doc:id="8cbecbd2-6496-491b-83ca-990a5ed76273">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  status: "failed",
  barcode: vars.RAW_JSON.barcode,
  scan_timestamp: vars.RAW_JSON.scan_timestamp,
  error: error.detailedDescription
}]]></ee:set-payload>
                    </ee:message>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="get:\products:scanare-produs-api-config">
        <logger level="INFO" message="get:\products:scanare-produs-api-config" />
		<db:select doc:name="Select" doc:id="0f553732-a82d-440b-be8c-9803c9a3814a" config-ref="Database_Config">
			<db:sql ><![CDATA[SELECT * FROM devimarket_db.products where is_active=1]]></db:sql>
		</db:select>
		<ee:transform doc:name="Transform Message" doc:id="7202ebaa-ec1c-4935-b22a-2cf14be5aab4" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
    </flow>
    <flow name="get:\products\(productId):scanare-produs-api-config">
        <ee:transform doc:name="Transform Message">
            <ee:variables>
                <ee:set-variable variableName="productId">attributes.uriParams.'productId'</ee:set-variable>
            </ee:variables>
        </ee:transform>
        <logger level="INFO" message="get:\products\(productId):scanare-produs-api-config" />
    </flow>
</mule>
