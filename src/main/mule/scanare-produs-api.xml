<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd  http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
    <apikit:config name="scanare-produs-api-config" api="scanare-produs-api.raml" outboundHeadersMapName="outboundHeaders" httpStatusVarName="httpStatus" />
    <http:listener-config name="HTTPS_Listener_config" doc:name="HTTPS Listener">
        <http:listener-connection host="0.0.0.0" port="8081">
        </http:listener-connection>
    </http:listener-config>
    <db:config name="Database_Config" doc:name="Database Config" doc:id="c69fe64d-b2d5-40bc-b75a-a97e741f46af">
        <db:generic-connection url="jdbc:clickhouse:https://cd1snbyswh.germanywestcentral.azure.clickhouse.cloud:8443/default?ssl=true&amp;compress=0" driverClassName="com.clickhouse.jdbc.ClickHouseDriver" user="default" password="ORO~b1.47MDxJ" />
    </db:config>
    <flow name="scanare-produs-api-main">
        <http:listener path="/api/*" config-ref="HTTPS_Listener_config">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body><![CDATA[#[payload]]]></http:body>
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:error-response>
        </http:listener>
        <apikit:router doc:name="APIkit Router" doc:id="5ba6b89e-8674-4ab5-a95e-ce7b7f31bacc" config-ref="scanare-produs-api-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:BAD_REQUEST">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Bad request"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">400</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:METHOD_NOT_ALLOWED">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Method not allowed"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">405</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_ACCEPTABLE">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not acceptable"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">406</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:UNSUPPORTED_MEDIA_TYPE">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Unsupported media type"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">415</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_IMPLEMENTED">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not Implemented"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">501</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="scanare-produs-api-console">
        <http:listener path="/console/*" config-ref="HTTPS_Listener_config">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body><![CDATA[#[payload]]]></http:body>
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:error-response>
        </http:listener>
        <apikit:console config-ref="scanare-produs-api-config" />
    </flow>
    <flow name="post:\product_scan:application\json:scanare-produs-api-config">
        <set-variable value="#[payload]" doc:name="Set Variable" doc:id="ef042891-e289-4a07-9cce-83628a034c75" variableName="RAW_JSON" />
		<choice doc:name="Choice" doc:id="4b858e8e-c30e-4ce7-bb2f-a4e86897c91e">
            <when expression="#[!isEmpty(payload.barcode) and !isEmpty(payload.scan_timestamp) and (payload.scan_timestamp as DateTime {format: &quot;yyyy-MM-dd'T'HH:mm:ssXXX&quot;} default null) != null]">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  status: "success",
  operation: "updated",
  productId: "abc-uuid",
  barcode: vars.RAW_JSON.barcode,
  scan_timestamp: vars.RAW_JSON.scan_timestamp
} as Object {encoding: "UTF-8", mediaType: "application/json"}]]></ee:set-payload>
                    </ee:message>
                </ee:transform>
            </when>
            <otherwise>
                <set-variable value="400" doc:name="Set Variable" doc:id="697c0d7b-6268-4a17-b4e7-ad8a5349373a" variableName="httpStatus" />
				<raise-error doc:name="Raise error" doc:id="5d0973db-a68b-434f-95f4-77681c98b989" type="PRODUCT:NOT_VALID" description="Barcode or timestamp are invalid, please check the request." />
            </otherwise>
        </choice>
        <ee:transform doc:name="Transform Message" doc:id="500b54b0-1194-49ef-868b-2570e31f8eb8">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::core::Strings


var fallbackTimestamp = now() as String { format: "yyyy-MM-dd'T'HH:mm:ss'Z'" }

---
{
  barcode: upper(trim(payload.barcode)), // normalizeazÄƒ barcode-ul
  scan_timestamp: 
    if (!isEmpty(payload.scan_timestamp)) 
      payload.scan_timestamp 
    else 
      fallbackTimestamp,

  clickhouse_formatted_timestamp: 
    if (!isEmpty(payload.scan_timestamp))
      (payload.scan_timestamp as DateTime) as String { format: "yyyy-MM-dd HH:mm:ss" }
    else 
      (now() as DateTime) as String { format: "yyyy-MM-dd HH:mm:ss" }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        <db:select doc:name="Select" doc:id="cf9ce4f2-1389-421c-93b7-f04a4c3fbd61" config-ref="Database_Config" target="SELECT_VALUE">
            <db:sql><![CDATA[SELECT 1 FROM devimarket_db.product_scan WHERE barcode = :barcode LIMIT 1]]></db:sql>
            <db:input-parameters><![CDATA[#[{
  "barcode": payload.barcode
  
}]]]></db:input-parameters>
        </db:select>
		<choice doc:name="Choice" doc:id="fb8bc993-d948-460b-bfb4-67be3a18c049">
			<when expression="#[sizeOf(vars.SELECT_VALUE) == 0]" >
				<try doc:name="Try" doc:id="10d06beb-eff9-498d-993b-7d034f8473eb" >
					<db:insert doc:name="Insert" doc:id="5371b09a-793a-4897-adcc-615140fb57f1" config-ref="Database_Config">
                    <db:sql><![CDATA[INSERT INTO devimarket_db.product_scan(barcode, timestamp) VALUES (:barcode, :clickhouse_formatted_timestamp)]]></db:sql>
                    <db:input-parameters><![CDATA[#[{
  "barcode": payload.barcode,
  "clickhouse_formatted_timestamp": payload.clickhouse_formatted_timestamp
  
}]]]></db:input-parameters>
                </db:insert>
					<error-handler>
						<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="f5f5d809-845d-44c9-88af-4a85fa692644" type="ANY">
							<logger level="ERROR" doc:name="Logger" doc:id="3f42e311-ee90-4906-8f10-3e15eae9d28a" message="#[error.description]"/>
							<ee:transform doc:name="Transform Message" doc:id="d1da5e42-b001-4270-95b2-6bfa5d17ecda" >
								<ee:message >
									<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	
	
  status: "insert failed",
  barcode: vars.RAW_JSON.barcode,
  scan_timestamp: vars.RAW_JSON.scan_timestamp,
  error: error.description
}]]></ee:set-payload>
								</ee:message>
							</ee:transform>
							<set-variable value="500" doc:name="Set Variable" doc:id="258b946c-74de-4511-b598-c20fab1e4b62" variableName="httpStatus" />
						</on-error-propagate>
					</error-handler>
				</try>
				<ee:transform doc:name="Transform Message" doc:id="2ea392c9-8b55-406e-89ed-51e2e788c722">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---

{
   
        status: "success",
        operation: "created",
        barcode: vars.RAW_JSON.barcode,
        error: error.description 
    
    
}]]></ee:set-payload>
                    </ee:message>
                </ee:transform>
				<set-variable value="201" doc:name="Set Variable" doc:id="57dd1592-3d32-48b1-8338-a7580531c4c0" variableName="httpStatus" />
			</when>
			<otherwise>
                <logger level="ERROR" doc:name="Logger" doc:id="005a0395-e1fe-47b0-9ac5-2db6f7ecef00" message="error.description"/>
				<ee:transform doc:name="Transform Message" doc:id="5fb4279b-d340-4695-ae70-69cc73fc031f">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  
        status: "success",
        operation: "updated",
        barcode: vars.RAW_JSON.barcode,
        error: error.description
    
   
}]]></ee:set-payload>
                    </ee:message>
                </ee:transform>
				<set-variable value="200" doc:name="Set Variable" doc:id="3b66396b-a0c9-418f-959e-cd36863b55c2" variableName="httpStatus" />
            </otherwise>
        </choice>
		<error-handler>
            <on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="7ad5ad90-7231-42c5-9240-c8c494d05f99" type="ANY">
				<logger level="ERROR" doc:name="Logger" doc:id="f0608545-735b-459a-92f4-f6ae967fc70d" message="#[error.description]" />
				<ee:transform doc:name="Transform Message" doc:id="956a8782-74ef-4c7c-a8fb-47caa2471c31">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    payload: {
        status: "error",
        message: "An internal server error occurred. Please contact support.",
        details: "Error type: " ++ (error.errorType.identifier default "Unknown")
    },
    attributes: {
        statusCode: 500 
    }
}]]></ee:set-payload>
							</ee:message>
						</ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="get:\products:scanare-produs-api-config">
		<set-variable value="#[attributes.queryParams.limit default 50 as Number]" doc:name="Set Variable" doc:id="cd4908cd-2858-4640-ba48-249d3551b105" variableName="LIMIT"/>
		<set-variable value="#[attributes.queryParams.page default 1 as Number]" doc:name="Set Variable" doc:id="ab7b0bd2-811f-41ae-a3fa-4d36849701f8" variableName="PAGE"/>
		<choice doc:name="Choice" doc:id="1607ee35-0cd2-4b78-8431-2aaefb690a76" >
			<when expression="#[vars.PAGE &lt; 1 or vars.LIMIT &lt; 1 or vars.LIMIT &gt; 50]">
				<set-variable value="400" doc:name="Set Variable" doc:id="5b6bb615-f5d1-405d-9e14-f4187a3044bd" variableName="httpStatus"/>
				<raise-error doc:name="Raise error" doc:id="709e053e-0bc9-414b-afa7-39516ef939ae" type="QUERY_PARAMS:INVALID" description="Invalid page or limit query parameters"/>
			</when>
			<otherwise >
				<ee:transform doc:name="Transform Message" doc:id="71928bae-9b07-45f3-99bd-3c1d014a3626">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
var offset = (vars.PAGE - 1) * vars.LIMIT
---
{
  sqlWhere: "WHERE is_active = 1",
  sqlOrder: "ORDER BY name ASC",
  sqlLimitOffset: "LIMIT " ++ vars.LIMIT as String ++ " OFFSET " ++ offset as String,
  pagination: {
    page: vars.PAGE,
    limit: vars.LIMIT,
    offset: offset
  }
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" message="#[payload]" />
				<set-variable value='#[%dw 2.0&#10;output application/json&#10;---&#10;"SELECT * FROM devimarket_db.products " ++ payload.sqlWhere as String ++" " ++ payload.sqlOrder as String ++ " " ++ payload.sqlLimitOffset as String ++ ""]' doc:name="Set Variable" doc:id="f214d8cc-810b-4560-b4c4-b1d0c9e9a606" variableName="sqlQuery"/>
				<db:select doc:name="Select" doc:id="8daf067b-fe48-4e8f-8786-c6ff3bb8c23c" config-ref="Database_Config">
					<db:sql ><![CDATA[#[vars.sqlQuery as String] ]]></db:sql>
					<db:input-parameters ><![CDATA[#[payload]]]></db:input-parameters>
				</db:select>
				<ee:transform doc:name="Transform Message" doc:id="7202ebaa-ec1c-4935-b22a-2cf14be5aab4">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
				<set-variable value="#[payload]" doc:name="Set Variable" doc:id="8fb9c96a-dbf2-4d1f-9c3e-c28c229fdabe" variableName="Products"/>
				<db:select doc:name="Select" doc:id="3454018a-dee6-47b8-bbfc-590afa216b54" config-ref="Database_Config">
					<db:sql ><![CDATA[SELECT COUNT(*) AS total FROM devimarket_db.products
]]></db:sql>
					<db:input-parameters ><![CDATA[#[vars.sqlWhere]]]></db:input-parameters>
				</db:select>
				<set-variable value="#[payload[0].total]" doc:name="Set Variable" doc:id="26fce8fb-5407-434b-a534-9babcdfad209" variableName="TotalCount"/>
				<ee:transform doc:name="Transform Message" doc:id="fbe4ffd4-1b95-400d-b1b0-d1969d4ac533" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
  metadata: {
    currentPage: vars.PAGE,
    pageSize: vars.LIMIT,
    totalPages: ceil((vars.totalCount as Number) / vars.LIMIT),
    totalCount: vars.totalCount
  },
  data: vars.Products
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
    </flow>
    <flow name="get:\products\(productId):scanare-produs-api-config">
        <ee:transform doc:name="Transform Message">
            <ee:variables>
                <ee:set-variable variableName="productId">attributes.uriParams.'productId'</ee:set-variable>
            </ee:variables>
        </ee:transform>
        <logger level="INFO" message="get:\products\(productId):scanare-produs-api-config" />
    </flow>
</mule>
